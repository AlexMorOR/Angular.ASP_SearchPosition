{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SearchService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.backendURL;\n    this.searchUrl = this.baseUrl + \"/search\";\n    this.enginesUrl = this.baseUrl + \"/search/engines\";\n    this.historyUrl = this.baseUrl + \"/search/history\";\n    this.searchResults = [];\n    this.avaliableEngines = [];\n  }\n  updateEngines() {\n    this.http.get(this.enginesUrl).subscribe({\n      next: res => {\n        console.log(res);\n        this.avaliableEngines = res;\n      },\n      error: e => {\n        console.log(e);\n      }\n    });\n  }\n  updateHistory() {\n    this.http.get(this.historyUrl).subscribe({\n      next: res => {\n        this.searchResults = res;\n      },\n      error: e => {\n        console.log(e);\n      }\n    });\n  }\n  search(query, url, engine) {\n    this.http.get(this.searchUrl + `?query=${query}&url=${url}&engine=${engine.searchEngine}`).subscribe({\n      next: res => {\n        this.searchResults.unshift(res);\n      },\n      error: e => {\n        console.log(e);\n      }\n    });\n  }\n}\nSearchService.ɵfac = function SearchService_Factory(t) {\n  return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient));\n};\nSearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SearchService,\n  factory: SearchService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;;;AAO1D,OAAM,MAAOC,aAAa;EAUxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IARxB,YAAO,GAAUH,WAAW,CAACI,UAAU;IACvC,cAAS,GAAG,IAAI,CAACC,OAAO,GAAG,SAAS;IACpC,eAAU,GAAG,IAAI,CAACA,OAAO,GAAG,iBAAiB;IAC7C,eAAU,GAAG,IAAI,CAACA,OAAO,GAAG,iBAAiB;IAE7C,kBAAa,GAAoB,EAAE;IACnC,qBAAgB,GAAoB,EAAE;EAEE;EAExCC,aAAa;IACX,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACC,UAAU,CAAC,CAACC,SAAS,CACtC;MACEC,IAAI,EAAGC,GAAG,IAAG;QACXC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,IAAI,CAACG,gBAAgB,GAAGH,GAAqB;MAC/C,CAAC;MACDI,KAAK,EAAGC,CAAC,IAAG;QAAGJ,OAAO,CAACC,GAAG,CAACG,CAAC,CAAC;MAAE;KAChC,CACF;EACH;EAEAC,aAAa;IACX,IAAI,CAACd,IAAI,CAACI,GAAG,CAAC,IAAI,CAACW,UAAU,CAAC,CAACT,SAAS,CACtC;MACEC,IAAI,EAAGC,GAAG,IAAG;QACX,IAAI,CAACQ,aAAa,GAAGR,GAAqB;MAC5C,CAAC;MACDI,KAAK,EAAGC,CAAC,IAAG;QAAGJ,OAAO,CAACC,GAAG,CAACG,CAAC,CAAC;MAAE;KAChC,CACF;EACH;EAEAI,MAAM,CAACC,KAAY,EAAEC,GAAU,EAAEC,MAAmB;IAClD,IAAI,CAACpB,IAAI,CAACI,GAAG,CAAC,IAAI,CAACiB,SAAS,GAC1B,UAAUH,KAAK,QAAQC,GAAG,WAAWC,MAAM,CAACE,YAAY,EAAE,CACzD,CAAChB,SAAS,CACT;MACEC,IAAI,EAAGC,GAAG,IAAG;QACX,IAAI,CAACQ,aAAa,CAACO,OAAO,CAACf,GAAmB,CAAC;MACjD,CAAC;MACDI,KAAK,EAAGC,CAAC,IAAG;QAAGJ,OAAO,CAACC,GAAG,CAACG,CAAC,CAAC;MAAE;KAChC,CACF;EACL;;AA9CWf,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAA0B,SAAb1B,aAAa;EAAA2B,YAFZ;AAAM","names":["environment","SearchService","constructor","http","backendURL","baseUrl","updateEngines","get","enginesUrl","subscribe","next","res","console","log","avaliableEngines","error","e","updateHistory","historyUrl","searchResults","search","query","url","engine","searchUrl","searchEngine","unshift","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\AlexMor\\Documents\\GitProjects\\Angular.ASP_SearchPosition\\Angular.ASP_SearchPosition.SPA\\src\\app\\shared\\search.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { SearchEngine } from './search-engine.model';\nimport { SearchResult } from './search-result.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchService {\n\n  baseUrl:string = environment.backendURL;\n  searchUrl = this.baseUrl + \"/search\";\n  enginesUrl = this.baseUrl + \"/search/engines\";\n  historyUrl = this.baseUrl + \"/search/history\";\n\n  searchResults : SearchResult[] = [];\n  avaliableEngines : SearchEngine[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  updateEngines(){\n    this.http.get(this.enginesUrl).subscribe(\n      {\n        next : res =>{\n          console.log(res);\n          this.avaliableEngines = res as SearchEngine[];\n        },\n        error : e => { console.log(e); }\n      }\n    );\n  }\n\n  updateHistory(){\n    this.http.get(this.historyUrl).subscribe(\n      {\n        next : res =>{\n          this.searchResults = res as SearchResult[];\n        },\n        error : e => { console.log(e); }\n      }\n    );\n  }\n\n  search(query:string, url:string, engine:SearchEngine){\n    this.http.get(this.searchUrl + \n      `?query=${query}&url=${url}&engine=${engine.searchEngine}`\n      ).subscribe(\n        {\n          next : res =>{\n            this.searchResults.unshift(res as SearchResult);\n          },\n          error : e => { console.log(e); }\n        }\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}